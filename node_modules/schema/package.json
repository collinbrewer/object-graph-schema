{
  "_args": [
    [
      "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git",
      "/Users/collinbrewer/Documents/work/brewer-collective/projects-active/libraries/object-graph-schema"
    ]
  ],
  "_from": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git",
  "_id": "schema@0.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/schema",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://bitbucket.org/collinbrewer/schema/raw/master/package.json",
      "httpsUrl": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git",
      "shortcut": "bitbucket:collinbrewer/schema",
      "ssh": "git@bitbucket.org:collinbrewer/schema.git",
      "sshUrl": "git+ssh://git@bitbucket.org/collinbrewer/schema.git",
      "type": "bitbucket"
    },
    "name": null,
    "raw": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git",
    "rawSpec": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git",
    "scope": null,
    "spec": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git#c44c3864043c4e8b304b5f2f41a5da23d3f45aeb",
  "_shasum": "aa6d704fa2cc2c746dc0c0e6533b782fb6e1a9cd",
  "_shrinkwrap": null,
  "_spec": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git",
  "_where": "/Users/collinbrewer/Documents/work/brewer-collective/projects-active/libraries/object-graph-schema",
  "author": {
    "email": "collin@brewer-collective.com",
    "name": "Collin Brewer"
  },
  "dependencies": {},
  "description": "Schema defines a protocol for using json objects to define arbitrary schemas and a utility for parsing and understanding schemas.",
  "devDependencies": {
    "mocha": "^2.2.5"
  },
  "gitHead": "c44c3864043c4e8b304b5f2f41a5da23d3f45aeb",
  "homepage": "https://bitbucket.org/collinbrewer/schema#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "schema",
  "optionalDependencies": {},
  "readme": "# Schema\nSchema defines a protocol for using json objects to define arbitrary schemas and a utility for parsing and understanding schemas.\n\nIt's used by Synth to understand and build the object graph.\n\n## Protocol Concept\nThe protocol for defining schemas is quite simple, and offers a lot of flexibility for various data formats.  It uses a nested approach where a ```type``` property defines how the schema is treated.\n\nThe predefined schema types are:\n- **collection**: A schema defining a list of entities\n- **entity**: A schema defining the format of an object\n- **property**: A schema defining a single field of an object\n\nThe following data:\n\n```javascript\nvar data={\n   \"Todo\" : [\n      {\n         id: 1234,\n         title: \"Hello World\"\n      }\n   ],\n   \"User\" : [\n      {\n         id: 4321,\n         name: \"Chris Ericson\"\n      }\n   ]\n};\n```\n\nCan be defined explicitly in Schema as:\n\n```javascript\nvar schema={\n   \"schemaType\": \"store\",\n   \"entities\" : [\n      {\n         \"schemaType\" : \"entity\",\n         \"name\" : \"Todo\",\n         \"properties\": [\n            {\n               \"schemaType\" : \"property\",\n               \"name\" : \"id\",\n               \"type\" : \"number\"\n            },\n            {\n               \"schemaType\" : \"property\",\n               \"name\" : \"title\",\n               \"type\" : \"string\"\n            }\n         ]\n      },\n      {\n         \"schemaType\" : \"entity\",\n         \"name\" : \"User\",\n         \"properties\" : [\n            {\n               \"schemaType\" : \"property\",\n               \"name\" : \"id\",\n               \"type\" : \"number\"\n            },\n            {\n               \"schemaType\" : \"property\",\n               \"name\" : \"name\",\n               \"type\" : \"string\"\n            }\n         ]\n      }\n   ]\n}\n```\n\n...Or represented in the basic string format:\n```javascript\nvar schema=\"{Todo:[{id:0,title:''}]}\";\n```\n\nFor simplicity, you can skip using schemaTypes and Schema will assume a more traditional format of store->collections->properties, or database->tables->fields... or natively, an object of lists of objects\n\n## Usage\n```javascript\nvar json={\n   \"type\" : \"store\",\n   \"Todo\" : {\n      \"type\": \"entity\",\n      \"schema\" : {\n\n      }\n   }\n};\n\nvar schema=new Schema(json);\n\nvar entitiesSchema=schema.get(\"entities\");\n\nvar entitySchema=entitiesSchema.get(\"Todo\");\n\nvar propertiesSchema=entitySchema.get(\"properties\");\n\nvar propertySchema=propertySchema(\"title\");\n```\n",
  "readmeFilename": "README.markdown",
  "repository": {
    "type": "git",
    "url": "git+https://collinbrewer@bitbucket.org/collinbrewer/schema.git"
  },
  "scripts": {
    "test": "mocha spec"
  },
  "version": "0.0.1"
}
